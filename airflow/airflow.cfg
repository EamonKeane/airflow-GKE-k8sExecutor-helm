[core]
airflow_home = /usr/local/airflow
dags_folder = {{ .Values.airflowCfg.core.dagsFolder }}
base_log_folder = /usr/local/airflow/logs
logging_level = DEBUG
remote_logging = False
# Remote base log folder is set from an environment variable in web, scheduler and migration pods
remote_base_log_folder = 
remote_log_conn_id = {{ .Values.airflowCfg.core.remoteLogConnId}}
executor = {{ .Values.airflowCfg.core.executor }}
parallelism = 32
load_examples = False
plugins_folder = /usr/local/airflow/plugins
sql_alchemy_conn = $SQL_ALCHEMY_CONN
# fernet_key set as env variable in web, scheduler and migration pods
# fernet_key = 

[scheduler]
dag_dir_list_interval = 300
child_process_log_directory = /usr/local/airflow/logs/scheduler
# Task instances listen for external kill signal (when you clear tasks
# from the CLI or the UI), this defines the frequency at which they should
# listen (in seconds).
job_heartbeat_sec = 5
max_threads = 2

# The scheduler constantly tries to trigger new tasks (look at the
# scheduler section in the docs for more information). This defines
# how often the scheduler should run (in seconds).
scheduler_heartbeat_sec = {{ .Values.airflowCfg.scheduler.schedulerHeartbeatSec }}

# after how much time should the scheduler terminate in seconds
# -1 indicates to run continuously (see also num_runs)
run_duration = -1

# after how much time a new DAGs should be picked up from the filesystem
min_file_process_interval = 0

statsd_on = False
statsd_host = localhost
statsd_port = 8125
statsd_prefix = airflow

# How many seconds to wait between file-parsing loops to prevent the logs from being spammed.
min_file_parsing_loop_time = 1

print_stats_interval = 30
scheduler_zombie_task_threshold = 300
max_tis_per_query = 0
authenticate = False

# Turn off scheduler catchup by setting this to False.
# Default behavior is unchanged and
# Command Line Backfills still work, but the scheduler
# will not do scheduler catchup if this is False,
# however it can be set on a per DAG basis in the
# DAG definition (catchup)
catchup_by_default = True

[webserver]
# The base url of your website as airflow cannot guess what domain or
# cname you are using. This is used in automated emails that
# airflow sends to point links to the right web server

base_url = http://localhost:8080

# The ip specified when starting the web server
web_server_host = 0.0.0.0

# The port on which to run the web server
web_server_port = 8080

# Paths to the SSL certificate and key for the web server. When both are
# provided SSL will be enabled. This does not change the web server port.
web_server_ssl_cert =
web_server_ssl_key =

# Number of seconds the webserver waits before killing gunicorn master that doesn't respond
web_server_master_timeout = 120

# Number of seconds the gunicorn webserver waits before timing out on a worker
web_server_worker_timeout = 120

# Number of workers to refresh at a time. When set to 0, worker refresh is
# disabled. When nonzero, airflow periodically refreshes webserver workers by
# bringing up new ones and killing old ones.
worker_refresh_batch_size = 1

# Number of seconds to wait before refreshing a batch of workers.
worker_refresh_interval = 30

# Secret key used to run your flask app
secret_key = temporary_key

# Number of workers to run the Gunicorn web server
workers = 4

# The worker class gunicorn should use. Choices include
# sync (default), eventlet, gevent
worker_class = sync

# Log files for the gunicorn webserver. '-' means log to stderr.
access_logfile = -
error_logfile = -

# Expose the configuration file in the web server
expose_config = True

# Set to true to turn on authentication:
# https://airflow.incubator.apache.org/security.html#web-authentication
authenticate = {{ .Values.webScheduler.web.authenticate }}
auth_backend = {{ .Values.webScheduler.web.authBackend }}


# Filter the list of dags by owner name (requires authentication to be enabled)
filter_by_owner = False

# Filtering mode. Choices include user (default) and ldapgroup.
# Ldap group filtering requires using the ldap backend
#
# Note that the ldap server needs the "memberOf" overlay to be set up
# in order to user the ldapgroup mode.
owner_mode = user

# Default DAG view.  Valid values are:
# tree, graph, duration, gantt, landing_times
dag_default_view = tree

# Default DAG orientation. Valid values are:
# LR (Left->Right), TB (Top->Bottom), RL (Right->Left), BT (Bottom->Top)
dag_orientation = LR

# Puts the webserver in demonstration mode; blurs the names of Operators for
# privacy.
demo_mode = False

# The amount of time (in secs) webserver will wait for initial handshake
# while fetching logs from other worker machine
log_fetch_timeout_sec = 5

# By default, the webserver shows paused DAGs. Flip this to hide paused
# DAGs by default
hide_paused_dags_by_default = False

# Consistent page size across all listing views in the UI
page_size = 100

# Use FAB-based webserver with RBAC feature
rbac = False

[google]
client_id = 
client_secret = 
oauth_callback_route = /oauth2callback
domain = {{ .Values.webScheduler.web.googleAuthDomain }}

[kubernetes]
airflow_configmap = {{ .Values.airflowCfg.kubernetes.airflowConfigmap }}-{{ .Release.Time.Seconds }}
worker_container_repository = {{ .Values.airflowCfg.kubernetes.workerContainerRepository }}
worker_container_tag = {{ .Values.airflowCfg.kubernetes.workerContainerTag }}
worker_container_image_pull_policy = IfNotPresent
worker_service_account_name = {{ .Values.airflowCfg.kubernetes.workerServiceAccountName }}
delete_worker_pods = True
git_repo = 
git_branch =
git_subpath =
git_user =
git_password =
dags_volume_claim = {{ .Values.webScheduler.dagsVolumeClaim }} 
dags_volume_subpath = {{ .Values.dagVolume.dagSubPath }}
logs_volume_claim = {{ .Values.webScheduler.logsVolumeClaim }}
logs_volume_subpath = {{ .Values.logVolume.logSubPath }}
in_cluster = True
namespace = {{ .Values.airflowCfg.kubernetes.namespace }}
gcp_service_account_keys =

# For cloning DAGs from git repositories into volumes: https://github.com/kubernetes/git-sync
git_sync_container_repository = 
git_sync_container_tag = 
git_sync_init_container_name = 

[kubernetes_node_selectors]
# The Key-value pairs to be given to worker pods.
# The worker pods will be scheduled to the nodes of the specified key-value pairs.
# Should be supplied in the format: key = value
{{ .Values.airflowCfg.kubernetesNodeSelectors }}

[kubernetes_secrets]
{{ .Values.airflowCfg.kubernetesSecrets }}


[cli]
api_client = airflow.api.client.json_client
endpoint_url = http://localhost:8080
[api]
auth_backend = airflow.api.auth.backend.default
[github_enterprise]
api_rev = v3

[admin]
# UI to hide sensitive variable fields when set to True
hide_sensitive_variable_fields = True
[elasticsearch]
elasticsearch_host =
