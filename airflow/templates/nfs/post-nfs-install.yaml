{{- if .Values.nfs.createServer -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: nfsinit
  labels:
    # The "app.kubernetes.io/managed-by" label is used to track which tool deployed a given chart.
    # It is useful for admins who want to see what releases a particular tool
    # is responsible for.
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    # The "app.kubernetes.io/instance" convention makes it easy to tie a release to all of the
    # Kubernetes resources that were created as part of that release.
    app.kubernetes.io/instance: {{ .Release.Name }}
    # This makes it easy to audit chart usage.
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/name: {{ template "airflow.chart" . }}
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: nfsinit
      labels:
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/name: {{ template "airflow.chart" . }}
    spec:
      # This shows how to use a simple value. This will look for a passed-in value
      # called restartPolicy. If it is not found, it will use the default value.
      # {{ default "Never" .restartPolicy }} is a slightly optimized version of the
      # more conventional syntax: {{ .restartPolicy | default "Never" }}
      restartPolicy: {{ default "Never" .restartPolicy }}
      containers:
        - name: nfsinit
          image: "dtzar/helm-kubectl"
          # All we're going to do is sleep for a while, then exit.
          command: ["/bin/bash", "-c", "POD=$(kubectl get pods --selector=role=nfs-server -o jsonpath='{.items[0].metadata.name}'); echo $POD; kubectl exec -i $POD -- /bin/bash -c \"mkdir -p /exports/logs;mkdir -p /exports/dags;chmod go+rw /exports/dags;chmod go+rw /exports/logs; ls -ltrah /exports/\""]
{{- end -}}