{{- if .Values.webScheduler.installWebServer -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "airflow.webserver.fullname" . }}
  labels:
    app: {{ template "airflow.name" . }}
    chart: {{ template "airflow.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "airflow.name" . }}
      tier: {{ .Values.webScheduler.web.name }}
  replicas: {{ .Values.webScheduler.web.webReplicaCount }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/cfgmap-airflow-cfg.yaml") . | sha256sum }}
      labels:
        app: {{ template "airflow.name" . }}
        tier: {{ .Values.webScheduler.web.name }}
    spec:
      restartPolicy: Always
      serviceAccountName: {{ .Values.webScheduler.serviceAccountName }}
      containers:
        - name: {{ template "airflow.webserver.fullname" . }}
          image: {{ .Values.webScheduler.image }}:{{ .Values.webScheduler.tag }}
          ports:
            - name: {{ .Values.webScheduler.web.name }}
              containerPort: 8080
          volumeMounts:
          - name: {{ .Values.dagVolume.gcePersistentDisk }} 
            mountPath: {{ .Values.webScheduler.dagsMountPath }}
            subPath: {{ .Values.dagVolumeClaimSubPath }}
            readOnly: true
          - name: {{ .Values.webScheduler.airflowCfgConfigMap }}
            mountPath: {{ .Values.webScheduler.airflowCfgPath }}
            subPath: airflow.cfg
          env:
           - name: SQL_ALCHEMY_CONN
             valueFrom:
               secretKeyRef:
                 name: {{ .Values.secrets.name }}
                 key: {{ .Values.secrets.key.sqlAlchemyConn }}
           - name: AIRFLOW__CORE__FERNET_KEY
             valueFrom:
               secretKeyRef:
                  name: {{ .Values.secrets.name }}
                  key: {{ .Values.secrets.key.fernetKey }}
           - name: AIRFLOW__CORE__REMOTE_BASE_LOG_FOLDER
             valueFrom:
               secretKeyRef:
                 name: {{ .Values.secrets.name }}
                 key: "{{ .Values.secrets.key.gcsLogFolder }}"
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 20
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 20
            timeoutSeconds: 30
          args: ["webserver"]
      volumes:
        - name: {{ .Values.webScheduler.airflowCfgConfigMap }}
          configMap:
            name: "{{ .Values.webScheduler.airflowCfgConfigMap }}-{{ .Release.Time.Seconds }}"
        - name: {{ .Values.dagVolume.gcePersistentDisk }}  
          persistentVolumeClaim:
            claimName: {{ .Values.dagVolume.gcePersistentDisk }} 
{{- end -}}